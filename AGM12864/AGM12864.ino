
//==================================
// Depurar?
// 1 = Sim, exibe no console serial.
// 0 = Não.
//
// Nota: Pode apresentar um atraso
// na renderização das imagens 
// quando serial habilitado.
//
//==================================

#define DEBUG 0

//==================================
// Modelo
// 1 = Para modelo AGM 12864D2
// 0 = Para modelo AGM 12864A/12864E1
//
// Nota: Os pinos CS1 e CS2 possuem
// sinal lógico inverso a depender
// do modelo do módulo LCD.
//
//==================================

#define INVERT_SELECTOR 1

//==================================
// Seletores de chip
//==================================

#define CHIP1    0x40
#define CHIP2    0x80  
#define ALL_CHIP 0xc0

//==================================
// Endereços de página
//==================================

#define PAGE1 0xb8
#define PAGE2 0xb9
#define PAGE3 0xba
#define PAGE4 0xbb
#define PAGE5 0xbc
#define PAGE6 0xbd
#define PAGE7 0xbe
#define PAGE8 0xbf

//==================================
// Pinos de Comunicação
//==================================

#define E   13 // PINO 13
#define RS  12 // PINO 12
#define RW  11 // PINO 11
#define CS1 10 // PINO 10
#define CS2 9  // PINO 9
#define DB0 A0 // PINO A0
#define DB1 2  // PINO 2
#define DB2 3  // PINO 3
#define DB3 4  // PINO 4
#define DB4 5  // PINO 5
#define DB5 6  // PINO 6
#define DB6 7  // PINO 7
#define DB7 8  // PINO 8

//==================================
// Bloco de leitura de comando
//==================================

void readCommand(byte chip) 
{
  pinMode(DB0, INPUT);
  pinMode(DB1, INPUT);
  pinMode(DB2, INPUT);
  pinMode(DB3, INPUT);
  pinMode(DB4, INPUT);
  pinMode(DB5, INPUT);
  pinMode(DB6, INPUT);
  pinMode(DB7, INPUT);

#if DEBUG
  Serial.println(F("A RECEBER COMANDO:"));
  Serial.println(F("RS: 0"));
  Serial.println(F("RW: 1"));
#endif
  digitalWrite(RS, LOW);
  digitalWrite(RW, HIGH);

  chipSelect(chip);
  
#if DEBUG
  Serial.println(F("LENDO DO BARRAMENTO:"));
  Serial.println(F("E: 1"));
#endif
  digitalWrite(E, HIGH);
  delay(10);
#if DEBUG
  Serial.print(F("DB0: "));
  Serial.println(digitalRead(DB0));
  Serial.print(F("DB1: "));
  Serial.println(digitalRead(DB1));
  Serial.print(F("DB2: "));
  Serial.println(digitalRead(DB2));
  Serial.print(F("DB3: "));
  Serial.println(digitalRead(DB3));
  Serial.print(F("DB4: "));
  Serial.println(digitalRead(DB4));
  Serial.print(F("DB5: "));
  Serial.println(digitalRead(DB5));
  Serial.print(F("DB6: "));
  Serial.println(digitalRead(DB6));
  Serial.print(F("DB7: "));
  Serial.println(digitalRead(DB7));

  Serial.println(F("E: 0"));
#endif
  digitalWrite(E, LOW);
}

//==================================
// Bloco de escrita de comando
//==================================

void writeCommand(byte chip, byte data) 
{
  pinMode(DB0, OUTPUT);
  pinMode(DB1, OUTPUT);
  pinMode(DB2, OUTPUT);
  pinMode(DB3, OUTPUT);
  pinMode(DB4, OUTPUT);
  pinMode(DB5, OUTPUT);
  pinMode(DB6, OUTPUT);
  pinMode(DB7, OUTPUT);

#if DEBUG
  Serial.println(F("A ENVIAR COMANDO:"));
  Serial.println(F("RS: 0"));
  Serial.println(F("RW: 0"));
#endif
  digitalWrite(RS, LOW);
  digitalWrite(RW, LOW);

  chipSelect(chip);
  sendBus(data);
}

//==================================
// Bloco de escrita de dados
//==================================

void writeData(byte chip, byte data) 
{
  pinMode(DB0, OUTPUT);
  pinMode(DB1, OUTPUT);
  pinMode(DB2, OUTPUT);
  pinMode(DB3, OUTPUT);
  pinMode(DB4, OUTPUT);
  pinMode(DB5, OUTPUT);
  pinMode(DB6, OUTPUT);
  pinMode(DB7, OUTPUT);

#if DEBUG
  Serial.println(F("A ENVIAR DADOS:"));
  Serial.println(F("RS: 1"));
  Serial.println(F("RW: 0"));
#endif
  digitalWrite(RS, HIGH);
  digitalWrite(RW, LOW);

  chipSelect(chip);
  sendBus(data);
}

//==================================
// Bloco de seleção de chip
//==================================

void chipSelect(byte chip) 
{
#if DEBUG
  Serial.println(F("SELECIONANDO CHIP:"));
  Serial.print(F("CS1: "));
  Serial.println(INVERT_SELECTOR ? !bitRead(chip, 7) : bitRead(chip, 7));
#endif
  digitalWrite(CS1, INVERT_SELECTOR ? !bitRead(chip, 7) : bitRead(chip, 7));

#if DEBUG
  Serial.print(F("CS2: "));
  Serial.println(INVERT_SELECTOR ? !bitRead(chip, 6) : bitRead(chip, 6));
#endif
  digitalWrite(CS2, INVERT_SELECTOR ? !bitRead(chip, 6) : bitRead(chip, 6));
}

//==================================
// Bloco de envido para barramento
//==================================

void sendBus(byte data) 
{
#if DEBUG
  Serial.println(F("ENVIANDO PARA BARRAMENTO:"));
  Serial.print(F("DB0: "));
  Serial.println(bitRead(data, 0));
  Serial.print(F("DB1: "));
  Serial.println(bitRead(data, 1));
  Serial.print(F("DB2: "));
  Serial.println(bitRead(data, 2));
  Serial.print(F("DB3: "));
  Serial.println(bitRead(data, 3));
  Serial.print(F("DB4: "));
  Serial.println(bitRead(data, 4));
  Serial.print(F("DB5: "));
  Serial.println(bitRead(data, 5));
  Serial.print(F("DB6: "));
  Serial.println(bitRead(data, 6));
  Serial.print(F("DB7: "));
  Serial.println(bitRead(data, 7));
#endif

  digitalWrite(DB0, bitRead(data, 0));
  digitalWrite(DB1, bitRead(data, 1));
  digitalWrite(DB2, bitRead(data, 2));
  digitalWrite(DB3, bitRead(data, 3));
  digitalWrite(DB4, bitRead(data, 4));
  digitalWrite(DB5, bitRead(data, 5));
  digitalWrite(DB6, bitRead(data, 6));
  digitalWrite(DB7, bitRead(data, 7));

#if DEBUG
  Serial.println(F("E: 1"));
#endif
  digitalWrite(E, HIGH);
  __asm__ __volatile__ ("nop\n\t");
#if DEBUG
  Serial.println(F("E: 0"));
#endif
  digitalWrite(E, LOW);
}

//==================================
// Bloco de reinício de endereço
//==================================

void homeAddress(byte page)
{
  writeCommand(ALL_CHIP, page);
}

//==================================
// Bloco setup()
//==================================

void setup()
{
#if DEBUG
   Serial.begin(9600);
#endif

   pinMode(E, OUTPUT);
   pinMode(RS, OUTPUT);
   pinMode(RW, OUTPUT);
   pinMode(CS1, OUTPUT);
   pinMode(CS2, OUTPUT);
#if DEBUG
   delay(1000);
#endif

#if DEBUG
   Serial.println(F("----- STATUS INICIAL -----"));

   delay(1000);

   Serial.println(F("CHIP 1:"));
#endif
   readCommand(CHIP1);
#if DEBUG
   Serial.println(F("CHIP 2:"));
#endif
   readCommand(CHIP2);

#if DEBUG
   Serial.println(F("----- COMANDOS INICIAIS -----"));

   delay(1000);
#endif

   writeCommand(ALL_CHIP, 0x3f); /*display on*/   
   writeCommand(ALL_CHIP, 0x40); /*y=0*/
   writeCommand(ALL_CHIP, 0xb8); /*x=0*/
   writeCommand(ALL_CHIP, 0xc0); /*display start line*/
   
#if DEBUG
   Serial.println(F("----- STATUS FINAL -----"));

   delay(1000);

   Serial.println(F("STATUS CHIP 1:"));
#endif
   readCommand(CHIP1);
#if DEBUG
   Serial.println(F("STATUS CHIP 2:"));
#endif
   readCommand(CHIP2);
}

/* Bloco loop() */
void loop() 
{
#if DEBUG
  Serial.println(F("----- EXIBINDO ROTINAS -----"));
#endif
    fullOn();
    delay(1000);
    HorizontalLine();
    delay(1000);
    Cross_Dot();
    delay(1000);
    VerticalLine();
    delay(1000);
    ShowPicture();
    delay(1000);
}

//==================================
// full on
//==================================

void fullOn()
{
  homeAddress(PAGE1);
  for(byte y = 0; y < 8; y++) {
    homeAddress(PAGE1 + y);
    for (byte x = 0; x < 64; x++) {
      writeData(CHIP1, 0xff);
    }
    for (byte x = 0; x < 64; x++) {
      writeData(CHIP2, 0xff);
    }
  }
}

//==================================
// show picture
//==================================

byte picture[8][128] = {
  0x00,0xFE,0xFE,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
  0x06,0x06,0x06,0x06,0x06,0xFE,0xFE,0x00,
  0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x40,0xC0,0x00,0x00,0x80,0xC0,0x80,0x00,
  0x00,0xC0,0x40,0x00,0x00,0x80,0xC0,0x40,
  0xC0,0x80,0x00,0x00,0x00,0xF8,0x00,0x00,
  0x00,0x80,0x40,0x40,0x40,0xC0,0x00,0x00,
  0x00,0x80,0xC0,0x40,0xC0,0x80,0x00,0x00,
  0x00,0xC0,0x80,0x40,0x40,0x40,0x80,0x80,
  0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x80,
  0xC0,0x40,0xC0,0x80,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
  0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x7C,0x70,0x0F,0x01,0x0F,0x70,
  0x7C,0x07,0x00,0x00,0x1F,0x27,0x44,0x44,
  0x44,0x67,0x27,0x00,0x00,0x7F,0x00,0x00,
  0x1F,0x20,0x40,0x40,0x40,0x60,0x00,0x00,
  0x1F,0x3F,0x60,0x40,0x60,0x3F,0x1F,0x00,
  0x00,0x7F,0x00,0x00,0x00,0x00,0x7F,0x00,
  0x00,0x00,0x00,0x7F,0x00,0x00,0x1F,0x27,
  0x44,0x44,0x44,0x67,0x27,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
  0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
  0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x40,0x20,0x30,0xF8,0x00,
  0x00,0x00,0x00,0x30,0x18,0x08,0x08,0x08,
  0x90,0xF0,0x00,0x00,0x60,0xF0,0x98,0x08,
  0x98,0xF0,0x60,0x00,0x00,0xC0,0x00,0x00,
  0x00,0xC0,0x00,0x00,0xE0,0x10,0x88,0x88,
  0x88,0x18,0x30,0x00,0x00,0x00,0x00,0x80,
  0xE0,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xC0,0xE0,0x60,
  0x20,0x60,0xFC,0xFC,0xFC,0x00,0xE4,0xE4,
  0x00,0x80,0xC0,0xE0,0x20,0x20,0x60,0x60,
  0x40,0x00,0xE0,0xE0,0x60,0x20,0x60,0xE0,
  0xC0,0x00,0x00,0xFC,0xFC,0x00,0xC0,0xE0,
  0x20,0x20,0xE0,0xE0,0xC0,0x00,0x60,0xE0,
  0x80,0x00,0x80,0xE0,0xE0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
  0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,
  0x00,0x00,0x00,0x60,0x50,0x48,0x44,0x42,
  0x43,0x40,0x00,0x00,0x1C,0x3E,0x63,0x41,
  0x63,0x3E,0x1C,0x00,0x40,0x60,0x1B,0x0E,
  0x1B,0x60,0x40,0x00,0x1F,0x33,0x40,0x40,
  0x40,0x33,0x1E,0x00,0x00,0x0C,0x0F,0x09,
  0x08,0x7F,0x08,0x08,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x07,0x1F,0x3F,0x30,
  0x20,0x30,0x3F,0x3F,0x3F,0x00,0x3F,0x3F,
  0x00,0x10,0x31,0x33,0x23,0x22,0x3E,0x3E,
  0x0C,0x00,0xFF,0xFF,0x30,0x20,0x30,0x3F,
  0x1F,0x07,0x00,0x3F,0x3F,0x00,0x3E,0x36,
  0x22,0x22,0x37,0x3F,0x3F,0x20,0x00,0x03,
  0xFF,0xFC,0x3F,0x07,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
  0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
  0x00,0x7F,0x7F,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
  0x60,0x60,0x60,0x60,0x60,0x7F,0x7F,0x00  
};

void ShowPicture()
{
  homeAddress(PAGE1);
  for (byte y = 0; y < 8; y++) {
    homeAddress(PAGE1 + y);
    for(byte x = 0;x < 64; x++) {
      writeData(CHIP1, picture[y][x]);
    }
    for(byte x = 64; x < 128; x++) {
      writeData(CHIP2, picture[y][x]);
    }
  }
}

//==================================
//   HORIZONTAL LINE
//==================================

void HorizontalLine()
{
  homeAddress(PAGE1);
  for (byte y = 0; y < 8; y++) {
    homeAddress(PAGE1 + y);
    for(byte x = 0; x < 64; x++) {
      writeData(CHIP1,0xaa);
    }
    for(byte x = 0; x < 64; x++) {
      writeData(CHIP2,0xaa);
    }
  }
}

//==================================
//      CROSS DOT
//==================================

void Cross_Dot()
{
  homeAddress(PAGE1);
  for (byte y = 0; y < 8; y++) {
    homeAddress(PAGE1 + y);
    for(byte x = 0; x < 32; x++) {
      writeData(CHIP1, 0xaa);
      writeData(CHIP1, 0x55);
    }
    for(byte x = 0; x < 32; x++) {
      writeData(CHIP2, 0xaa);
      writeData(CHIP2, 0x55);
    }
  }
}

//==================================
//        VERTICAL LINE
//==================================

void VerticalLine()
{
  homeAddress(PAGE1);
  for (byte y = 0; y < 8; y++) {
    homeAddress(PAGE1 + y);
    for(byte x = 0; x < 32; x++) {
      writeData(CHIP1, 0xff);
      writeData(CHIP1, 0x00);
    }
    for(byte x = 0; x < 32; x++) {
      writeData(CHIP2, 0xff);
      writeData(CHIP2, 0x00);
    }
  }
}
